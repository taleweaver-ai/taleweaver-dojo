/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;

export function defineContractComponents(world: World) {
  return {
    Avatar: (() => {
      return defineComponent(
        world,
        { assistantId: RecsType.BigInt, name: RecsType.BigInt, alias: RecsType.BigInt, descriptionA: RecsType.BigInt, descriptionB: RecsType.BigInt },
        {
          metadata: {
            name: "Avatar",
            types: ["felt252","felt252","felt252","felt252","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    Decision: (() => {
      return defineComponent(
        world,
        { assistantId: RecsType.BigInt, player: RecsType.BigInt, counter: RecsType.BigInt, threadId: RecsType.BigInt, runId: RecsType.BigInt, cidA: RecsType.BigInt, cidB: RecsType.BigInt },
        {
          metadata: {
            name: "Decision",
            types: ["felt252","contractaddress","felt252","felt252","felt252","felt252","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    Game: (() => {
      return defineComponent(
        world,
        { id: RecsType.Number, seed_id: RecsType.Number, player_id: RecsType.BigInt, avatar_id: RecsType.Number, counter: RecsType.Number },
        {
          metadata: {
            name: "Game",
            types: ["u32","u32","contractaddress","u32","u64"],
            customTypes: [],
          },
        }
      );
    })(),
    Moves: (() => {
      return defineComponent(
        world,
        { player: RecsType.BigInt, remaining: RecsType.Number, last_direction: RecsType.Number },
        {
          metadata: {
            name: "Moves",
            types: ["contractaddress","u8","enum"],
            customTypes: ["Direction"],
          },
        }
      );
    })(),
    Position: (() => {
      return defineComponent(
        world,
        { player: RecsType.BigInt, vec: { x: RecsType.Number, y: RecsType.Number } },
        {
          metadata: {
            name: "Position",
            types: ["contractaddress","u32","u32"],
            customTypes: ["Vec2"],
          },
        }
      );
    })(),
    Seed: (() => {
      return defineComponent(
        world,
        { assistantId: RecsType.BigInt, creator: RecsType.BigInt, cidA: RecsType.BigInt, cidB: RecsType.BigInt },
        {
          metadata: {
            name: "Seed",
            types: ["felt252","contractaddress","felt252","felt252"],
            customTypes: [],
          },
        }
      );
    })(),
  };
}
